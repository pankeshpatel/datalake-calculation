AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

  
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  # HelloWorldFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: hello-world/
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs20.x
  #     Architectures:
  #       - x86_64
  #     Events:
  #       HelloWorld:
  #         Type: Api 
  #         Properties:
  #           Path: /hello
  #           Method: get

# IAM Role - start
  AWSGlueETLJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: Glue_ETL_Job
      Description: Allows ETL jobs to run and access S3 bucket
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  JsonToParquetETLCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Json_To_Parquet_ETL_CrawlerRole
      Description: Allows Crawler to crawl s3 bucket
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: glue.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/IAMFullAccess

  GlueJobLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueJobLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - "*"  # Be specific in assigning resources,

        - PolicyName: GlueExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "glue:StartJobRun"
                  - "glue:GetJobRun"
                  - "glue:GetJobRuns"
                  - "glue:BatchGetJobs"
                Resource: 
                  - "*"  # Be specific in assigning resources

  DlcEventBridgeTriggerEtlGlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DLCEventBridgeTriggerETLGlueJobPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt dlcTriggerETLJob.Arn
  
  DlcEventBridgeIotDataLakeCalculationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DLCIotDataLakeCalculationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt iotDataLakeCalculation.Arn

  DataLakeCalculationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DataLakeCalculationLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AthenaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "athena:StartQueryExecution"
                  - "athena:GetQueryExecution"
                  - "athena:GetQueryResults"
                  - "athena:GetQueryResultsStream"
                  - "athena:GetWorkGroup"
                  - "athena:ListWorkGroups"
                  - "athena:ListQueryExecutions"
                  - "athena:ListDatabases"
                  - "athena:ListDataCatalogs"
                  - "athena:ListTableMetadata"
                  - "athena:GetTableMetadata"
                Resource:
                  - "*"  # Be specific in assigning resources
# IAM Role - end

# S3 buckets - start
# etl-source-bucket
  jsonStorageDatabase:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: dev-etl-src-test-json-storage-us-east-1
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

# ETL_Destination
  parquetStorageDatabase:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: dev-etl-dest-test-json-storage-us-east-1
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  scriptStorageDatabase:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: dev-sam-pankesh-etl-script-storage
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  tmpStorageDatabase:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: dev-sam-pankesh-etl-script-tmp-storage
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
# S3 bucket - end

# glue job
  # DLC_ETL_Glue_Job
  TransformJsonDataJob:
    Type: "AWS::Glue::Job"
    Properties:
      Role: !GetAtt AWSGlueETLJobRole.Arn 
      Name: "TransformJsonToParquet"
      Description: "Trasform JSON to Parquet"
      WorkerType: G.1X
      NumberOfWorkers: 2
      GlueVersion: 5.0
      MaxRetries: 0
      ExecutionClass: FLEX
      ExecutionProperty: 
        MaxConcurrentRuns: 1
      Command:
        "Name": "glueetl"
        # Cross Account S3 Access
        "ScriptLocation" : s3://etl-script-storage-us-east-1/transform_json_to_parquet.py 
        # "ScriptLocation": s3://dev-etl-script-storage-us-east-1/transform_json_to_parquet.py

# glue crawler
  JsonToParquetETLCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: JsonToParquetETLCrawler
      Description: Crawls Parqurt files created by ETL job
      Role: !GetAtt JsonToParquetETLCrawlerRole.Arn 
      DatabaseName: !Ref iotGlueDatabase
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_EVERYTHING
      Targets:
          S3Targets:
            - Path: !Sub s3://dev-etl-dest-test-json-storage-us-east-1/

  iotGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: IoT Glue Database for Analytics
        Name: iot-analytics-database-0

  thingTypeCombinedGlueTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref iotGlueDatabase
      TableInput:
        Description: Combined Table for all Thing Type values for this Account
        Name: iot-thing-type-combined
        StorageDescriptor:
          Columns:
            - Name: externalkey
              Type: string
            - Name: thingtype
              Type: string
            - Name: timestamp
              Type: timestamp

# EventBridge
  # DLC_EventBridge_Trigger_ETL_Glue_Job
  # DLC_IoT_DataLake_Calculation

  # Sample code --

    # checkOfflineStatusEvent:
    # Type: AWS::Events::Rule
    # Condition: EnableCheckOfflineStatusEventBridgeRuleCondition
    # Properties:
    #   Name: Check_Offline_Status
    #   Description: Trigger
    #   ScheduleExpression: cron(0/2 * * * ? *) # every 2 minutes
    #   State: ENABLED
    #   Targets:
    #     - Id: IoT_Heart_Beat_Monitor_Event_Target
    #       Arn: !GetAtt deviceConnectionManagerFunction.Arn
    
       
  dlcEventBridgeTriggerEtlGlueJob:
    Type: AWS::Events::Rule
    Properties:
      Name: DLC_EventBridge_Trigger_ETL_Glue_Job
      ScheduleExpression: rate(5 minutes)
      State: DISABLED
      EventBusName: default
      Targets:
        - Id: TrigerLambda
          Arn: !GetAtt dlcTriggerETLJob.Arn
          RoleArn: !GetAtt DlcEventBridgeTriggerEtlGlueJobRole.Arn

  # DLC_IoT_DataLake_Calculation
  dlcIotDataLakeCalculation:
    Type: AWS::Events::Rule
    Properties:
      Name: DLC_IoT_DataLake_Calculation
      ScheduleExpression: rate(5 minutes)
      State: DISABLED
      EventBusName: default
      Targets:
        - Id: TrigerLambda
          Arn: !GetAtt iotDataLakeCalculation.Arn
          RoleArn: !GetAtt DlcEventBridgeIotDataLakeCalculationRole.Arn


# lambda functions
  # DLC_Lambda_Trigger_ETL_Job
  dlcTriggerETLJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DLC_Trigger_ETL_Job
      Description: Trigger a glue etl job periodically
      CodeUri: lambdas/DLC_Trigger_ETL_Job
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt GlueJobLambdaRole.Arn 

  
  # # DLC_Generate_Athena_Query
  # apiGenerateAthenaQuery:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: DLC_Generate_Athena_Query
  #     Description: Takes DLC requests and Generate Athena Query
  #     CodeUri: lambdas/API_Generate_Athena_Query
  #     Handler: index.handler
  #     Runtime: nodejs20.x
  #     MemorySize: 128
  #     Timeout: 300
  #     # Policies: 
  #     #   # Add Role/ Policy DynamoDB, Lambda basic execution

  iotDataLakeCalculation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: IoT_DataLake_Calculation
      Description: perform data lake calculation by trigger athena query
      CodeUri: lambdas/IoT_DataLake_Calculation
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 480
      # Add rew role
      # Policies: 
      #   # Add Role/ Policy Athena, DynamoDB, Lambda basic execution
      Role: !GetAtt DataLakeCalculationLambdaRole.Arn


# DynamoDB Table 
#DLC_DataLake_Config
  dlcDataLakeConfig:
    Type: AWS::Serverless::SimpleTable
    UpdateReplacePolicy: Retain  
    DeletionPolicy: Retain
    Properties:
      TableName: IoT_DLC_Config
      PrimaryKey:
        Name: thingType
        Type: String

  dlcDataLakeMetrics:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain  
    DeletionPolicy: Retain
    Properties:
      TableName: IoT_DLC_Metrics
      KeySchema:
        - AttributeName: externalKey
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: externalKey
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 4
        WriteCapacityUnits: 4